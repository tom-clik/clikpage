/* 






*/

:root {
	/* VAR CLASSES (attach to BODY ) */
	--header-fixed: 0;
	--footer-fixed: 0;
	--menupos : static;/* static|fixed|slide   */
	--menu: open; /* open | close */
	--framed: 0;
	--site-align:center;

	/* style vars */
	--menu-width:220px;
	--xcol-width:160px;
	--header-height: 60px;
	--site-width:960px;
	--footer-height:60px;
	--menu-anim-time:0.2s;

	/* adjustment vars 
	These either need setting explicitly or programatically with something like:

	let menuPad = window.getComputedStyle(document.querySelector('#menu')).paddingTop;
	document.body.style.setProperty('--menu-top-padding', menuPad);
	*/

	--menu-top-padding: 0px; /* Should be the same as the "top" padding of the menu container when set to sticky */
	--xcol-top-padding:0px ;/* Should be the same as the "top" padding of the xcol container when set to sticky */

	/* Individual components of "body" padding */
	--site-top-padding: 0px;
	--site-right-padding: 0px;
	--site-bottom-padding: 0px;
	--site-left-padding: 0px;
}

#header {
	grid-area:header;
	height: var(--header-height);
}

.bodyWrapper {
	min-height:100%;
	padding: var(--site-top-padding) var(--site-right-padding)	var(--site-bottom-padding)	var(--site-left-padding);
}

body.header-fixed-1 .bodyWrapper {
	padding-top:0;
}
body.footer-fixed-1 .bodyWrapper {
	padding-bottom:0;
}

body.menupos-slide .bodyWrapper {
	padding-left: calc( var(--menu-width) + var(--site-left-padding) );
	/* This triggers on page load !!! See JS, we add it after load */
	/* transition : padding var(--menu-anim-time) ease-in-out;*/
}

body.header-fixed-1 #header {
	position: fixed;
	width:100%;
	top: var(--site-top-padding);
	left: 0;
	z-index: 100;
}

body.header-fixed-1   #ubercontainer{
	margin-top: calc(var(--site-top-padding) + var(--header-height));
}

body.footer-fixed-1 #footer {
	position: fixed;
	width:100%;
	bottom:  var(--site-bottom-padding) ;
	left: 0;
	z-index: 100;
}

body.footer-fixed-1  .bodyWrapper {
	padding-bottom: calc(var(--site-bottom-padding) + var(--footer-height));
}

.inner.spanning  {
	margin: 0 auto;
	max-width: var(--site-width);
}

body.site-align-left .inner.spanning {
	margin: 0 auto 0 0;
}

body.site-align-right .inner.spanning {
	margin: 0 0 0  auto;
}

body.framed-1 .inner.spanning {
	width: auto;
}

body.framed-1 #ubercontainer {
	max-width: var(--site-width);
	margin-left:auto;
	margin-right:auto;
}

body.framed-1.site-align-left .framed {
	margin: 0 auto 0 0;
}

body.framed-1.site-align-right .framed {
	margin: 0 0 0 auto ;
}

body.framed-1.header-fixed-1 #header, body.framed-1.footer-fixed-1 #footer {
	width: 100%;
	max-width:calc( var(--site-width) - var(--site-left-padding) - var(--site-right-padding) );
	left:auto;
}

body.framed-1.header-fixed-1 #header {
	top: var(--site-top-padding);
}

body.framed-1.footer-fixed-1 #footer {
	bottom: var(--site-bottom-padding);
}

#content {
	grid-area:content;
}

#bottomnav {
	grid-area:bottomnav;
}

#footer {
	grid-area:footer;
}

#footer_left {
	grid-area:footer_left;
}
#footer_middle {
	grid-area:footer_middle;
}
#footer_right {
	grid-area:footer_right;
}
#content_top {
	grid-area:content_top;
}
#columns {
	grid-area:columns;
}
#content_bottom {
	grid-area:content_bottom;
}
#menu {
	grid-area:menu;
	overflow: clip;
}
#maincol {
	grid-area:maincol;
	overflow: clip;
}
#xcol {
	grid-area:xcol;
	overflow: clip;
}
#maincol_top {
	grid-area:maincol_top;
}
#maincol_left {
	grid-area:maincol_left;
}
#maincol_right {
	grid-area:maincol_right;
}
#maincol_bottom {
	grid-area:maincol_bottom;
}

/** Have thought about some sort of generic setting here:
 * 
 *  Would need to get the top of the element + the top padding
 *  
 */
#menu.sticky-1 .inner {
	position:sticky;
	top: calc( (var(--header-fixed) * var(--header-height) ) + var(--menu-padding-top,4px) );
	z-index: 90;
}

#xcol.sticky-1 .inner {
	position:sticky;
	top: calc( (var(--header-fixed) * var(--header-height) ) + var(--xcol-padding-top,4px) );
	z-index: 90;
}

.inner {
	--mode: none;
	position: relative;
}

.show-hide {
	height:0 !important;
	visibility: hidden !important;
	border-width: 0 !important;
	margin:0 !important;
	padding:0 !important;
	overflow: hidden !important;
}

#ubercontainer {
	min-height:100%;
	--mode: rows;
	grid-template-rows: min-content auto min-content;
}

body.header-fixed-1 #ubercontainer {
	min-height:100%;
	--mode: rows;
	grid-template-rows: auto min-content;
}

#content_main > .cs-grid {
	--mode: named;
	min-height:100%;
	grid-template-areas: "menu maincol xcol";
	grid-template-columns: var(--menu-width) auto var(--xcol-width);
}

#content {
	min-height:100%;
	--mode: rows;
	grid-template-rows: min-content auto min-content;
}

#maincol {
	height:100%;
}

#maincol > .cs-grid {
	height:100%;
	--mode: named;
	grid-template-areas: "maincol_top maincol_top" "maincol_left maincol_right" "maincol_bottom maincol_bottom";
	grid-template-rows: min-content auto min-content;
	grid-template-columns:  1fr 1fr ;
}

#footer {
	height: var(--footer-height);
	--mode: rows;
	grid-template-rows: min-content auto;
}

#footer_left {
	justify-self: start;
}

#footer_right {
	justify-self: end;
}

#footer_middle {
	justify-self: center;
}


#header {
	--mode: rows;
	grid-template-rows:auto  min-content ;
}

#footer_main > .cs-grid {
	--mode: fixed;
	--grid-columns: 3;
}

@media (max-width:800px) {
	
	#content_main > .cs-grid {
		grid-template-areas: "menu maincol" "menu xcol";
		grid-template-columns: var(--menu-width) auto;
	}

	body.menupos-slide #content_main  > .cs-grid, body.menupos-fixed #content_main  > .cs-grid {
		--mode: none;
	}

}

@media (max-width:600px) {

	body {
		--menu: close;
	}

	#content_main > .inner {
		--mode: none;
		min-height: auto;
	}

	#content {
		--mode: none;
	}

	#maincol {
		height:auto;
	}

	#maincol > .cs-grid {
		--mode: none;
		height: auto;
	}

	#footer_main > .cs-grid {
		--mode: flex;
		--flex-direction: column;
		--justify-content:start;
	}

}

body.menupos-slide #menu, body.menupos-fixed #menu {
	--height: fixed;/* WIP trying to animate thesee */ 
	position: fixed;
	top: calc(var(--header-fixed) * var(--header-height) );
	left: 0;
	height: calc( 100vh - (var(--header-fixed) * var(--header-height)) - (var(--footer-fixed) * var(--footer-height) ) );
	width: var(--menu-width);
	transition: transform var(--menu-anim-time) ease-in-out; /* Smooth transition */
}

body.menupos-fixed #menu {
	left:  calc( ( -1 * var(--menu-width)) - 10px) ;
}

body.menupos-fixed #menu {
	top: 0;
	height: 100vh;
	z-index: 110;
}

body.menupos-none #menu {
	display: none;
}

body.menupos-none  #content_main > .inner, body.menupos-slide #content_main > .inner, body.menupos-fixed #content_main > .inner {
	grid-template-areas: "maincol xcol";
	grid-template-columns: auto var(--xcol-width) ;
}

body.menupos-slide.menu-close .bodyWrapper {
	padding-left: 0;
}

body.menupos-slide.menu-close #menu {
	transform: translateX( calc( ( -1 * var(--menu-width)) - 10px) );
}
body.menupos-fixed.menu-open #menu {
	transform: translateX( calc( ( var(--menu-width)) + 10px) );
}

body.menupos-slide #content .spanning, body.menupos-slide:not(.footer-fixed-1) #footer .spanning, body.menupos-slide:not(.header-fixed-1) #header .spanning {
	max-width: calc( var(--site-width) - var(--menu-width) );
	transition: max-width var(--menu-anim-time) ease-in-out;
}

body.menu-close.menupos-slide #content .spanning, body.menu-close.menupos-slide:not(.footer-fixed-1) #footer .spanning, body.menu-close.menupos-slide:not(.header-fixed-1) #header .spanning {
	max-width: calc( var(--site-width) );
}

#menubutton, #hamburger, #menuclose {
	display: none;
}

body[class*=menupos-slide] #menubutton {
	display: block;
}

body.menupos-fixed #hamburger,  body.menupos-fixed #menuclose {
	display: block;
}

#menubutton.state_open a .icon {
	transform: rotate(180deg);
}

@media (max-width:600px) {
	body {
		--menupos: slidedown;
	}
}

body.menupos-slidedown	#menubutton.state_open a .icon {
	transform: rotate(90deg);
}

body.menupos-slidedown {
	--menu: close;
}

body.menupos-slidedown.menu-close #menu {
	height:0;
}

body.menupos-slidedown #menu {
	--height: auto;/* WIP trying to animate thesee */ 
	position: static;
	height: auto;
	width: auto;
	/*	transform: translateY( -100% );
	transition: transform var(--menu-anim-time) ease-in-out; /* Smooth transition */
}

/*body.menupos-slidedown.menu-open #menu {
	transform: translateY( 0% );
}*/