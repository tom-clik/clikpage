/* set grid styling via classes */

@property --grid-mode {
	syntax: "none | fit | fill | fixed | fixedwidth | columns | rows | named | flex";
	inherits: false;
	initial-value: fit;
}

.cs-grid.grid-mode-none {
	display: block;
}

.cs-grid.grid-mode-fill {
	--grid-fit: auto-fill;
}

.cs-grid.grid-mode-fit, .cs-grid.grid-mode-fill  {
	grid-template-columns: repeat(var(--grid-fit), minmax(var(--grid-width),var(--grid-max-width)));
}

.grid-mode-flex {
	display: flex;
}

.cs-grid.grid-mode-fixed {
	grid-template-columns: repeat(var(--grid-columns), 1fr);
}

.cs-grid.grid-mode-fixedwidth {
	grid-template-columns:  repeat(auto-fit, var(--grid-width));
}

.cs-grid.grid-mode-columns {
	grid-template-columns: var(--grid-template-columns);
	grid-template-rows: var(--grid-template-rows);
}

.cs-grid.grid-mode-rows {
	grid-template-columns: 1fr;
	grid-template-rows: var(--grid-template-rows);
}
.cs-grid.grid-mode-named {
	grid-template-areas: var(--grid-template-areas);
	grid-template-columns: var(--grid-template-columns);
	grid-template-rows: var(--grid-template-rows);
}

.cs-grid:not(.grid-mode-named) > * {
	grid-area: unset !important;
}

.cs-grid[class*=cols-] {
	grid-template-columns: repeat(var(--grid-columns), 1fr);
}

.cols-2 {
	--grid-columns:2;
}

.cols-3 {
	--grid-columns:3;
}

.cols-4 {
	--grid-columns:4;
}

.cols-5 {
	--grid-columns:5;
}