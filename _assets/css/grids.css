/* 

# Grids

Static CSS for grid and flex styling 

See /_notes/grids.md

## Notes

IMPORTANT because grids can be within grids, we have an issue with CSS properties inheriting. To stop this, we use the @property
definitions below. This stops the problem but means all properties (apart from "grid-mode") then have to be defined on the inner container 

E.g. 

```css

#footer {
	--grid-mode: columns;
}

#footer .grid {
	--grid-template-columns: 
	--grid-gap: 24px 0;
}

*/

/* If you don't already know, you want fit, columns, or flex */
@property --grid-mode {
	syntax: 'none | fit | fill | fixed | fixedwidth | columns | rows | named | flex';
	inherits: false;
	initial-value: fit;
}

/* ALL OTHER PROPERTIES must be applied to .grid inner container 

/* Gap between cells. One value or column gap, row gap */
@property --grid-gap {
	syntax: '*';
	inherits: false;
	initial-value: 0px;
}

/* Maximum width of cells when using fit|fill */
@property --grid-width {
	syntax: '<length> | <percentage>';
	inherits: false;
	initial-value: 180px;
}

/* 1fr or a <length>. You probably want --grid-template-rows instead of this */
@property --grid-max-height {
	syntax: '*'; 
	inherits: false;
	initial-value: 1fr;
}

/*Number of columns when using mode=fixed. Actually what you want is mode=columns and set --grid-template-columns */
@property --grid-columns {
	syntax: '<integer>'; 
	inherits: false;
	initial-value: 3;
}

/* explicitly list heights of rows e.g. 120px auto 160px */
@property --grid-template-rows {
	syntax: '*';
	initial-value: auto;
	inherits: true;
}

/* explicitly list widths of columns e.g. 120px auto 160px */
@property --grid-template-columns {
	syntax: '*';
	inherits: false;
	initial-value: auto;
}

/* e.g. "header header" "menu main" "footer footer" */
@property --grid-template-areas {
	syntax: '*';
	inherits: false;
	initial-value: none;
}

@property --flex-direction {
	syntax: 'row | row-reverse | column | column-reverse'; 
	inherits: false;
	initial-value: row;
}

/* main axis alignment */
@property --justify-content {
	syntax: 'normal | start | end | center | space-between | space-around |  space-evenly'; 
	inherits: false;
	initial-value: normal;
}
/* alignment for multiple rows within their container (no, me neither: what you want is actually align-items) */
@property --align-content {
	syntax: 'normal | start | end | center | space-between | space-around |  space-evenly |  stretch'; 
	inherits: false;
	initial-value: normal;
}

/* this the vertical alignment you're after */
@property --align-items {
	syntax: 'normal | stretch | start | end | center '; 
	inherits: false;
	initial-value: normal;
}
/* the default for this 0 for mode=flex. This is applied explicitly below in a property query  */
@property --flex-stretch {
	syntax: '<number>'; 
	inherits: true;
	initial-value: 1;
}

@property --flex-wrap {
	syntax: 'wrap | nowrap'; 
	inherits: false;
	initial-value: wrap;
}


.cs-grid {
	container-name:grid;
	display: grid; /* need to get content to expand */
}

.grid {
	display:grid;
	grid-gap:var(--grid-gap);
	flex-direction: var(--flex-direction);
	align-content: var(--align-content);
	align-items: var(--align-items);
	justify-content: var(--justify-content);
	flex-wrap: var(--flex-wrap);
	grid-template-columns: var(--grid-template-columns);
	grid-template-rows: var(--grid-template-rows);
}

.cs-grid > .grid {
	height:100%;
	min-height: 100%;
	align-self: stretch; /* for grid/flex contexts */
}

.grid > * {
	height: var(--grid-max-height);
	flex-grow: var(--flex-stretch);
}

/* flex class deprecated - use grid-mode: flex */
.flex {
	grid-gap:var(--grid-gap);
	display: flex;
	--flex-stretch:0;
}

.flex > * {
	flex-grow: var(--flex-stretch);
}

@container grid ( style(--grid-mode:none) ) {
	.grid {
		display: block;
	}
}

@container grid ( style(--grid-mode:fit) ) {
	.grid {
		grid-template-columns: repeat(auto-fit, minmax(var(--grid-width),1fr));
	}
}

@container grid ( style(--grid-mode:fill) ) {
	.grid {
		grid-template-columns: repeat(auto-fill, minmax(var(--grid-width),1fr));
	}
}

@container grid ( style(--grid-mode:flex) ) {
	.grid {
		display: flex;
		--flex-stretch: 0; /* see notes */
	}
}

@container grid ( style(--grid-mode:fixed) ) {
	.grid {
		grid-template-columns: repeat(var(--grid-columns), 1fr);
	}
}

@container grid ( style(--grid-mode:fixedwidth) ) {
	.grid {
		grid-template-columns:  repeat(auto-fit, var(--grid-width));
	}
}

@container grid ( style(--grid-mode:rows) ) {
	.grid {
		grid-template-columns: 1fr;
	}
}

@container grid ( style(--grid-mode:named) ) {
	.grid {
		grid-template-areas: var(--grid-template-areas);
	}
}
/* Setting a name seems to cause issues when in other modes*/
@container grid ( not style(--grid-mode:named) ) {
	.grid > * {
		grid-area: unset !important;
	}
}
