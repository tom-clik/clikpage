/* 

# Grids

Static CSS for grid and flex styling 

## Notes

See /notes/grids.md

*/

/*

None of this properties stuff seems to work. We get undefined values, values that inherit when they shouldn't, the syntax stuff is a nightmare and basically they're not worth it

@property --grid-gap {
	syntax: "<length> | <percentage>";
	inherits: false;
	initial-value: 0;
}

@property --grid-fit {
	syntax: "auto-fit | auto-fill";
	inherits: false;
	initial-value: auto-fit;
}

@property --grid-width {
	syntax: "*"; 
	inherits: false;
	initial-value: 180px;
}

@property --grid-max-width {
	syntax: "*"; 
	inherits: false;
	initial-value: 1fr;
}

@property --grid-max-height {
	syntax: "*"; 
	inherits: false;
	initial-value: 1fr;
}

@property --grid-columns {
	syntax: "<integer>"; 
	inherits: false;
	initial-value: 2;
}

@property --grid-template-rows {
	initial-value: auto;
	inherits: true;
}

@property --grid-template-columns {
	inherits: false;
	initial-value: auto;
}

 e.g. "header header" "menu main" "footer footer" 
@property --grid-template-areas {
	inherits: false;
	initial-value: none;
}

@property --flex-direction {
	syntax: "row | row-reverse | column | column-reverse"; 
	inherits: false;
	initial-value: row;
}

@property --justify-content {
	syntax: "normal | start | end | center | space-between | space-around |  space-evenly |  stretch"; 
	inherits: false;
	initial-value: row;
}
 alignment for multiple rows 
@property --align-content {
	syntax: "normal | start | end | center | space-between | space-around |  space-evenly |  stretch"; 
	inherits: false;
	initial-value: normal;
}

 this the vertical alignment you want 
@property --align-items {
	syntax: "normal | stretch | start | end | center "; 
	inherits: false;
	initial-value: normal;
}

@property --flex-stretch {
	syntax: "0 | 1 "; 
	inherits: true;
	initial-value: 0;
}

@property --flex-wrap {
	syntax: "wrap | nowrap "; 
	inherits: false;
	initial-value: wrap;
}

@property --grid-mode {
	syntax: "none | fit | fill | fixed | fixedwidth | columns | rows | named | flex";
	inherits: false;
	initial-value: fit;
}*/

:root {
	--grid-mode: fit;
	--grid-gap: 0;
	--grid-fit: auto-fit;
	--grid-width: 180px;
	--grid-max-width: 1fr;
	--grid-max-height: 1fr;
	--grid-columns: 2;
	--grid-template-rows: auto;
	--grid-template-columns: auto;
	--grid-template-areas: none;
	--flex-direction: row;
	--justify-content: normal;
	--align-content: normal;
	--align-items: normal;
	--flex-stretch: 0;
	--flex-wrap: wrap;
}

.cs-grid {
	container-name:grid;
}

.grid {
	display:grid;
	grid-gap:var(--grid-gap);
	flex-direction: var(--flex-direction);
	align-content: var(--align-content);
	align-items: var(--align-items);
	justify-content: var(--justify-content);
	flex-wrap: var(--flex-wrap);
}

.cs-grid > .grid {
	height:100%;
}

.grid > * {
	height: var(--grid-max-height);
	flex-grow: var(--flex-stretch);
}

.flex {
	grid-gap:var(--grid-gap);
	display: flex;
	--flex-stretch:0;
}

.flex > * {
	flex-grow: var(--flex-stretch);
}

@container grid ( style(--grid-mode:none) ) {
	.grid {
		display: block;
	}
}

@container grid ( style(--grid-mode:fill) ) {
	.grid {
		--grid-fit: auto-fill;
	}
}

@container grid ( style(--grid-mode:fill) or style(--grid-mode:fit) ) {
	.grid {
		grid-template-columns: repeat(var(--grid-fit), minmax(var(--grid-width),var(--grid-max-width)));
	}
}

@container grid ( style(--grid-mode:flex) ) {
	.grid {
		display: flex;
	}
}

@container grid ( style(--grid-mode:fixed) ) {
	.grid {
		grid-template-columns: repeat(var(--grid-columns), 1fr);
	}
}

@container grid ( style(--grid-mode:fixedwidth) ) {
	.grid {
		grid-template-columns:  repeat(auto-fit, var(--grid-width));
	}
}

@container grid ( style(--grid-mode:columns) ) {
	.grid {
		grid-template-columns: var(--grid-template-columns);
		grid-template-rows: var(--grid-template-rows);
	}
}

@container grid ( style(--grid-mode:rows) ) {
	.grid {
		grid-template-columns: 1fr;
		grid-template-rows: var(--grid-template-rows);
	}
}

@container grid ( style(--grid-mode:named) ) {
	.grid {
		grid-template-areas: var(--grid-template-areas);
		grid-template-columns: var(--grid-template-columns);
		grid-template-rows: var(--grid-template-rows);
	}
}

@container grid ( not style(--grid-mode:named) ) {
	.grid > * {
		grid-area: unset !important;
	}
}
