/* 

# Grids

Static CSS for grid and flex styling 

## Notes

See /notes/grids.md

*/

@property --mode {
	syntax: "none | fit | fill | fixed | fixedwidth | columns | rows | named | flex";
	inherits: false;
	initial-value: fit;
}

@property --grid-gap {
	syntax: "<length> | <percentage>";
	inherits: false;
	initial-value: 0;
}

@property --grid-fit {
	syntax: "auto-fit | auto-fill";
	inherits: false;
	initial-value: auto-fit;
}

@property --grid-width {
	syntax: "*"; 
	inherits: false;
	initial-value: 180px;
}

@property --grid-max-width {
	syntax: "*"; 
	inherits: false;
	initial-value: 1fr;
}

@property --grid-max-height {
	syntax: "*"; 
	inherits: false;
	initial-value: 1fr;
}

@property --grid-columns {
	syntax: "<integer>"; 
	inherits: false;
	initial-value: 2;
}

@property --flex-direction {
	syntax: "row | row-reverse | column | column-reverse"; 
	inherits: false;
	initial-value: row;
}

@property --justify-content {
	syntax: "normal | start | end | center | space-between | space-around |  space-evenly |  stretch"; 
	inherits: false;
	initial-value: row;
}
/* alignment for multiple rows */
@property --align-content {
	syntax: "normal | start | end | center | space-between | space-around |  space-evenly |  stretch"; 
	inherits: false;
	initial-value: normal;
}

/* athis the vertical alignment you want */
@property --align-items {
	syntax: "normal | stretch | start | end | center "; 
	inherits: false;
	initial-value: normal;
}

@property --flex-stretch {
	syntax: "0 | 1 "; 
	inherits: true;
	initial-value: 0;
}

@property --flex-wrap {
	syntax: "wrap | nowrap "; 
	inherits: false;
	initial-value: wrap;
}

@property --grid-template-rows {
	inherits: false;
	initial-value: auto;
}
@property --grid-template-columns {
	inherits: false;
	initial-value: auto;
}

/* e.g. "header header" "menu main" "footer footer" */
@property --grid-template-areas {
	inherits: false;
	initial-value: none;
}

.cs-grid {
	display:grid;
	grid-gap:var(--grid-gap);
	flex-direction: var(--flex-direction);
	align-content: var(--align-content);
	align-items: var(--align-items);
	justify-content: var(--justify-content);
	flex-wrap: var(--flex-wrap);
}

.cs-grid.mode-none {
	display: block;
}

.cs-grid.mode-fill {
	--grid-fit: auto-fill;
}

.cs-grid.mode-fit, .cs-grid.mode-fill  {
	grid-template-columns: repeat(var(--grid-fit), minmax(var(--grid-width),var(--grid-max-width)));
}

.cs-grid > * {
	height: var(--grid-max-height);
	flex-grow: var(--flex-stretch);
}

.flex, .mode-flex {
	display: flex;
}

.cs-grid.mode-fixed {
	grid-template-columns: repeat(var(--grid-columns), 1fr);
}

.cs-grid.mode-fixedwidth {
	grid-template-columns:  repeat(auto-fit, var(--grid-width));
}

.cs-grid.mode-columns {
	grid-template-columns: var(--grid-template-columns);
	grid-template-rows: var(--grid-template-rows);
}

.cs-grid.mode-rows {
	grid-template-columns: 1fr;
	grid-template-rows: var(--grid-template-rows);
}
.cs-grid.mode-named {
	grid-template-areas: var(--grid-template-areas);
	grid-template-columns: var(--grid-template-columns);
	grid-template-rows: var(--grid-template-rows);
}

.cs-grid:not(.mode-named) > * {
	grid-area: unset !important;
}

.cs-grid[class*=cols-] {
	grid-template-columns: repeat(var(--grid-columns), 1fr);
}

.cols-2 {
	--grid-columns:2;
}

.cols-3 {
	--grid-columns:3;
}

.cols-4 {
	--grid-columns:4;
}

.cols-5 {
	--grid-columns:5;
}

