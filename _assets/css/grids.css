/* 

# Grids

Static CSS for grid styling 

## Grid Layouts

We think of grids as having a "mode". To apply these, ensure "--mode" is set and the javascript is run to apply the mode class or else explicity set the class with e.g. `class="cs-grid cols"`. Explicitly setting classes can't work for different modes in different viewports. Either get the JS running or see the CSS below to do it manually, which beats the point of using this script.

### Content fit (fit)

With a minimum width and maximum width set for the content items, this will add as many items as possible per row and stretch any items to ensure no gap is left. This is usually the setting you want -- it's the default for .cs-grid.

The only setting you usually need is `--grid-width` which is the minimum width. If you *really* know what you are doing you can also set what's known as the `grid-fit` and the maximum width of the cells (`--grid-max-width`).

### Fixed columns (fixed)

The number of columns in the grid is fixed. The columns are all equal. Set the columns with `--grid-columns`.

### Set column widths (columns)

Explicitly set the grid template columns in `--grid-template-columns`. Useful for having one column stretch.

### Set column rows (rows)

Explicitly set the grid template rows in `--grid-template-rows`. Useful for having one row stretch.

### Named positions (named)

Supply template positions in  `--grid-template-areas`.

### Fixed width (fixedwidth)

Little used setting where the cells have a fixed width and as many as possible fit the grid. Use `fit` in preference.

## Other grid layouts

If you want to set your own you could set `mode` to none or basically you'd just be better off not using this.

## Flex Layouts

Flex layouts are simpler. Most stretch properties translate with an equalivant var of the same name.

NB flex-grow is a var --flex-stretch (??)



*/

:root {
	--mode:fit;/* none|fit|fixed|fixedwidth|columns|rows|named|flex*/
	--grid-gap:0;
	--grid-fit:auto-fit;
	--grid-width:180px;
	--grid-max-width:1fr;
	--grid-max-height:auto;
	--grid-columns:2;
	--flex-direction:row;
	--justify-content:normal;
	--align-items:normal;
	--align-content:normal;/* alignment for multiple rows */
	--flex-stretch:0;/* treat as boolean */
	--flex-wrap: wrap;
	/* These given as examples only. Always set explicitly if using */
	--grid-template-rows:180px auto 120px;
	--grid-template-columns:20% auto;
	--grid-template-areas:"header header" "menu main" "footer footer";
}

.cs-grid {
	display:grid;
	grid-gap:var(--grid-gap);
	flex-direction: var(--flex-direction);
	align-items: var(--align-items);
	justify-content: var(--justify-content);
	flex-wrap: var(--flex-wrap);
}

.cs-grid.mode-none {
	display: block;
}

.cs-grid.mode-fit {
	grid-template-columns: repeat(var(--grid-fit), minmax(var(--grid-width),var(--grid-max-width)));
}

.cs-grid > * {
	height: var(--grid-max-height);
	flex-grow: var(--flex-stretch);
}

.flex, .mode-flex {
	display: flex;
}

.cs-grid.mode-fixed {
	grid-template-columns: repeat(var(--grid-columns), 1fr);
}

.cs-grid.mode-fixedwidth {
	grid-template-columns:  repeat(auto-fit, var(--grid-width));
}

.cs-grid.mode-columns {
	grid-template-columns: var(--grid-template-columns);
}

.cs-grid.mode-rows {
	grid-template-rows: var(--grid-template-rows);
}
.cs-grid.mode-name {
	grid-template-areas: var(--grid-template-areas);
	grid-template-columns: var(--grid-template-columns);
	grid-template-rows: var(--grid-template-rows);
}

.cols-2 {
	--grid-columns:2;
}

.cols-3 {
	--grid-columns:3;
}

.cols-4 {
	--grid-columns:4;
}

.cols-5 {
	--grid-columns:5;
}

