/* MENUS


Create a grid or flexbox menu from a ul

## Grid menus

By default menus are horizontal flex layouts. 


Menu settings don't translate well to single CSS settings. A combination is often required to achieve required behaviours.

Some examples are shown in the schemes.

## 1. Vertical menu

A vertical menu can be set with 

--menu-direction: column;
--menu-item-justify:start;
--menu-text-align:left;

## 2. Border boxes/borders

These simply don't work with CSS vars. There are schemes that show this, but essentially they have to be hand cranked.

## 3. Flex 

For a flex menu where the items shrink down, use 

--menu-stretch: 1;


## Notes

The a tags are actually set to display flex themselves in order to accomodate icons. To align the lext you have to set
the justify-content property.

# Highlights etc

Use the following selector 

hover   li a:hover
hi      li.hi a
*/

:root {
	--link-color: #000;
}
.cs-menu {
	--menu-border-color:var(--link-color);
	--menu-background: transparent;
	--menu-gap: 4px;/* Gap between items */
	--menu-item-padding: 0 8px;
	--menu-item-border:0;/* item border width */
	--menu-item-border-width: var(--menu-item-border); /* reserved for system. Used with e.g. boxes and dividers schemes */
	--menu-item-width: 140px; /* min width of menu items in grid layout (see menu-display)*/
	--menu-icon-display: none;/* none or block */
	--menu-label-display: block;/* text part of menu item:; none or block */
	--icon-width:32px;/* normal menu icons */
	--icon-height:32px;	
	--menu-icon-valign: middle;/* WIP */
	--menu-icon-gap: 8px;/* gap between label and icon */
	--menu-icon-stretch: 1;/* stretch labels to fill remaining space */
	--menu-openicon-width:16px;/* "openicon" is the automatic icon applied for sub menus. Needs work */
	--menu-openicon-height:16px;	
	--menu-openicon-adjust: -4px;
	--menu-text-align: center;/* alignment of text in menu items */
	--menu-anim-time: 0.3s;
	--menu-display: flex; /* grid | flex (or none for submenus )*/
	--menu-direction: row;
	--menu-stretch: 1;
	--menu-item-justify: center; /* item aligment start|center|end. Also see menu-text-align which usually needs setting as well */
	--menu-item-align: center; /* cross axis aligment, e.g. vertical when menu is horizontal */
	--menu-wrap: wrap;
}

.cs-menu ul {
	list-style: none;
	margin:0;
	padding-left: 0em;
    text-indent: 0px;
	display:var(--menu-display);
	flex-direction: var(--menu-direction);
	grid-template-columns: repeat(auto-fit, minmax(var(--menu-item-width),1fr));
	grid-gap:var(--menu-gap);
	justify-content: var(--menu-item-justify); /* needs formalising. This is the align mechanism as the a tags themselves are now flexboxes */
	align-items: var(--menu-item-align);
	flex-wrap: var(--menu-wrap);
}

.cs-menu li {
	position:relative;
	flex-grow: var(--menu-stretch);
}

.cs-menu a, .cs-menu a:hover {
	white-space: nowrap;
	color:var(--link-color);
	display:flex;
	flex-grow: 1;
	align-items: center;
	justify-content: var(--menu-item-justify); /* This is the icon, label etc  */
	grid-gap: var(--menu-icon-gap);
	text-decoration: none;
	padding:var(--menu-item-padding);	
	color:var(--link-color);
	border-width:var(--menu-item-border-width);
	border-style:solid;
	border-color:var(--menu-border-color);
	background-color: var(--menu-background);
	/* watch browser agent default. Can't apply to ul */
	text-align: var(--menu-text-align);	
	transition-property: background-color;
    transition-duration: var(--menu-anim-time);
    transition-timing-function: ease-in-out;
}

/* Per class behaviour applied via JS. leave for now. */
.cs-menu.open {
	height:auto;
}

@media screen and (max-width:630px) {

	.cs-menu.mobilemenu {
		height:0;
		overflow: hidden;
	}
	 /*need this. Watch specificity*/
	.cs-menu.mobilemenu.open {
		height:auto;
	}

}

/* Watch the specifity here. JS library creates clone to get heights */
ul.submenu {
	z-index: 100;
  	min-width:100%;
  	overflow: hidden;
  	height: auto;
  	--menu-direction: column;
  	--menu-display: none;

}

ul.submenu.open, ul.submenu.show  {
	--menu-display: flex;
}


.cs-menu li.open > ul.submenu {
	--menu-display: flex;
}

.cs-menu ul.submenu li.open > ul.submenu {
	margin-top:0px;
}

/* sub menu indicator */
.cs-menu a > i[class*=icon].openicon {
	--icon-height: 16px;
	--icon-width: 16px;
	display: block;
	flex-grow: 0;
	position: relative;
	right:var(--menu-openicon-adjust, 0);
	max-height:100%;
	top:0;
	/*width: var(--menu-openicon-width);
	height: var(--menu-openicon-height);*/
	fill:var(--link-color);
	stroke:var(--link-color);
	transition-property: transform;
	transition-duration: 0.3s;
	transition-timing-function: ease-in-out;
}

/* menu icons 

Requires icons.css and navbuttons.css

*/
.cs-menu a > i[class*=icon]  {
	display: var(--menu-icon-display);
	width:var(--icon-width);
	height:var(--icon-height);
	line-height:var(--icon-height);
	font-size: var(--icon-height);
	overflow: hidden;
}

.cs-menu a span {
	display: var(--menu-label-display);	
}

.cs-menu a b:before {
	content:var(--menu-icon);
}

.cs-menu li.open > a .openicon {
	transform: rotate(90deg);
}
/* Expand label to fill space */
.cs-menu a > span {
	flex-grow: var(--menu-icon-stretch);
}








