<!---

Preview a layout page with the styling generated by test_styles.cfm

## Notes

Going ok. Things we have to figure out

1. We need to set 100% height where we want the height to expand.
2. We need to not display any divs not in the grid template areas. The old e.g. M-X would auto set display:none for subcol
3. Assiging a grid template area breaks auto grids. Think we have a solution with "unset" for grid-area.

## Ideas

1. Where a grid is set to have grid template areas maybe display none by default and only turn on the ones we want?
2. Autoset grid template areas from the layouts. Could have height="auto".

## To do:

1. Vars: allow for definition of variables for widths etc
2. Fixed elements. Get vars working before we do this. Then you can e.g set top padding of something to be a variable.


--->

<cfscript>
param name="url.template" default="1";
if (NOT isValid("integer",  url.template, 1, 6)) {
	throw("Bad request");
}

request.prc.template = "testlayout" & url.template;

layoutroot = expandPath("../layouts");

layoutsObj = new clikpage.layouts.layouts(layoutroot);

mylayout = layoutsObj.getLayout("testlayout1/#request.prc.template#");

mylayout.layout.head().append("<style></style>");

divs = addInners(mylayout);

// big question here: how to add grid areas for all divs.
cssTemp = "";

for (div in divs) {
	cssTemp &= "###div# {grid-area:#div#;}" & newLine();
}

mylayout.layout.head().append("<style>#cssTemp#</style>")
	.append("<link rel=""stylesheet"" href=""/_assets/css/reset.css"">")
	.append("<link rel=""stylesheet"" href=""/_assets/css/images.css"">")
	.append("<link rel=""stylesheet"" href=""/_assets/css/menus.css"">")
	.append("<link rel=""stylesheet"" href=""/_assets/css/schemes/menus-schemes.css"">")
	.append("<link rel=""stylesheet"" href=""test_settings.css"">");
mylayout.layout.body().addClass("template-testlayout1");
if (url.template NEQ 1) {
	mylayout.layout.body().addClass("template-#request.prc.template#");
}

for (id in ["subcol","xcol"]) {
	cols = mylayout.layout.select("###id#");
	for (col in cols) {
		cols.html("Some content for #id#");
	}
}

// WriteOutput(HtmlCodeFormat(mylayout.layout.html()));
WriteOutput(mylayout.layout.html());

public array function addInners(required layout) {
	
	local.divs = [];
	local.test = arguments.layout.layout.select("div");
	for (local.div in local.test) {
		arrayAppend(local.divs, local.div.id());
	}

	for (local.div in local.divs) {
		local.node = arguments.layout.layout.select("###local.div#");
		local.node.html("<div class='inner'>" & local.node.html() & "</div>");
	}
	local.test = arguments.layout.layout.select("content");	
	for (local.div in local.test) {
		
		local.html = "";
		local.cs = layoutsObj.coldsoup.XMLNode2Struct(local.div);
		
		if (structKeyExists(local.cs, "title")) {
			local.html &= "<h2>" & local.cs.title & "</h2>";
		}
		if (structKeyExists(local.cs, "image")) {
			local.html &= "<figure><img src='" & local.cs.image & "' /></figure>";
		}
		if (structKeyExists(local.cs, "content")) {
			local.html &= "<p>" & local.cs.content & "</p>";
		}
		else if (structKeyExists(local.cs, "type")) {
			if (local.div.id() eq "topmenu") {
				local.html &= menu(request.prc.template);
			}
			else {
				local.html &= "<p>" & local.cs.type & " " & local.cs.id & " " & "</p>";
			}
		}

		local.div.tagName("div").html(local.html);
			
	}

	return local.divs;
	
}

function menu(section="") {
	var css = "<div id='mainmenu' class='cs-menu dividers scheme-flex menu-mobile scheme-plain'><ul>";
	for (local.i = 1 ; local.i lte 6 ; local.i++) {
		local.class = "testlayout#local.i#";
		if (local.i eq 1) {
			local.class = listAppend(local.class, " first");
		}
		if (arguments.section eq "testlayout#local.i#") {
			local.class = listAppend(local.class, " hilite");
		}
		
		css &= "<li><a class='#local.class#' href='?template=#local.i#'>Template #i#</a></li>";

	}

	return css ;
}

</cfscript>


